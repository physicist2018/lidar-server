// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package lidardb

import (
	"context"
	"database/sql"
)

const createExperiment = `-- name: CreateExperiment :one
INSERT INTO Experiment (
    Title, Start_Time, Comments, Wavelen, Vert_Res, Accum
) VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, start_time, title, comments, wavelen, vert_res, accum
`

type CreateExperimentParams struct {
	Title     string      `db:"title" json:"title"`
	StartTime interface{} `db:"start_time" json:"startTime"`
	Comments  string      `db:"comments" json:"comments"`
	Wavelen   float64     `db:"wavelen" json:"wavelen"`
	VertRes   float64     `db:"vert_res" json:"vertRes"`
	Accum     int64       `db:"accum" json:"accum"`
}

func (q *Queries) CreateExperiment(ctx context.Context, arg CreateExperimentParams) (Experiment, error) {
	row := q.db.QueryRowContext(ctx, createExperiment,
		arg.Title,
		arg.StartTime,
		arg.Comments,
		arg.Wavelen,
		arg.VertRes,
		arg.Accum,
	)
	var i Experiment
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.Title,
		&i.Comments,
		&i.Wavelen,
		&i.VertRes,
		&i.Accum,
	)
	return i, err
}

const createMeasurement = `-- name: CreateMeasurement :one
INSERT INTO Measurement(
    Start_Time, Prof_Cnt, Prof_Len, Rep_Rate, Profile_Data,  Experiment_ID
) VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, start_time, prof_cnt, prof_len, rep_rate, profile_data, experiment_id
`

type CreateMeasurementParams struct {
	StartTime    interface{}   `db:"start_time" json:"startTime"`
	ProfCnt      int64         `db:"prof_cnt" json:"profCnt"`
	ProfLen      int64         `db:"prof_len" json:"profLen"`
	RepRate      int64         `db:"rep_rate" json:"repRate"`
	ProfileData  interface{}   `db:"profile_data" json:"profileData"`
	ExperimentID sql.NullInt64 `db:"experiment_id" json:"experimentId"`
}

func (q *Queries) CreateMeasurement(ctx context.Context, arg CreateMeasurementParams) (Measurement, error) {
	row := q.db.QueryRowContext(ctx, createMeasurement,
		arg.StartTime,
		arg.ProfCnt,
		arg.ProfLen,
		arg.RepRate,
		arg.ProfileData,
		arg.ExperimentID,
	)
	var i Measurement
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.ProfCnt,
		&i.ProfLen,
		&i.RepRate,
		&i.ProfileData,
		&i.ExperimentID,
	)
	return i, err
}

const createTableExperiment = `-- name: CreateTableExperiment :exec
CREATE TABLE Experiment(
    ID integer primary key autoincrement,
    Start_Time timestamp not null default now,
    Title varchar(100) not null default 'no-title',
    Comments varchar(500) not null default 'no-comments',
    Wavelen real not null default 532.0,
    Vert_Res real not null default 1500.0,
    Accum integer not null default 10,
    unique (Start_Time, Title, Accum)
)
`

func (q *Queries) CreateTableExperiment(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createTableExperiment)
	return err
}

const createTableMeasurement = `-- name: CreateTableMeasurement :exec
CREATE TABLE Measurement(
    ID integer primary key autoincrement,
    Start_Time timestamp not null default now,
    Prof_Cnt integer not null default 1,
    Prof_Len integer not null default 512,
    Rep_Rate integer not null default 10,
    Profile_Data json,
    Experiment_ID integer,
    CONSTRAINT experiment_fk FOREIGN KEY (Experiment_ID) REFERENCES Experiment(ID)
)
`

func (q *Queries) CreateTableMeasurement(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createTableMeasurement)
	return err
}

const deleteExperimentById = `-- name: DeleteExperimentById :exec
DELETE
FROM Experiment
WHERE ID = ?
`

func (q *Queries) DeleteExperimentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExperimentById, id)
	return err
}

const deleteMeasurementById = `-- name: DeleteMeasurementById :exec
DELETE
FROM Measurement
WHERE ID = ?
`

func (q *Queries) DeleteMeasurementById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMeasurementById, id)
	return err
}

const getAllExperiments = `-- name: GetAllExperiments :many
SELECT id, start_time, title, comments, wavelen, vert_res, accum FROM Experiment ORDER BY Start_Time
`

func (q *Queries) GetAllExperiments(ctx context.Context) ([]Experiment, error) {
	rows, err := q.db.QueryContext(ctx, getAllExperiments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Experiment
	for rows.Next() {
		var i Experiment
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.Title,
			&i.Comments,
			&i.Wavelen,
			&i.VertRes,
			&i.Accum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMeasurements = `-- name: GetAllMeasurements :many
SELECT id, start_time, prof_cnt, prof_len, rep_rate, profile_data, experiment_id FROM Measurement
`

func (q *Queries) GetAllMeasurements(ctx context.Context) ([]Measurement, error) {
	rows, err := q.db.QueryContext(ctx, getAllMeasurements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measurement
	for rows.Next() {
		var i Measurement
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.ProfCnt,
			&i.ProfLen,
			&i.RepRate,
			&i.ProfileData,
			&i.ExperimentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMeasurementsForExpId = `-- name: GetAllMeasurementsForExpId :many
SELECT id, start_time, prof_cnt, prof_len, rep_rate, profile_data, experiment_id FROM Measurement
WHERE Experiment_ID = ? ORDER BY Start_Time
`

func (q *Queries) GetAllMeasurementsForExpId(ctx context.Context, experimentID sql.NullInt64) ([]Measurement, error) {
	rows, err := q.db.QueryContext(ctx, getAllMeasurementsForExpId, experimentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measurement
	for rows.Next() {
		var i Measurement
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.ProfCnt,
			&i.ProfLen,
			&i.RepRate,
			&i.ProfileData,
			&i.ExperimentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExperimentById = `-- name: GetExperimentById :one
SELECT id, start_time, title, comments, wavelen, vert_res, accum FROM Experiment
WHERE ID=? LIMIT 1
`

func (q *Queries) GetExperimentById(ctx context.Context, id int64) (Experiment, error) {
	row := q.db.QueryRowContext(ctx, getExperimentById, id)
	var i Experiment
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.Title,
		&i.Comments,
		&i.Wavelen,
		&i.VertRes,
		&i.Accum,
	)
	return i, err
}

const getMeasurement = `-- name: GetMeasurement :one
SELECT id, start_time, prof_cnt, prof_len, rep_rate, profile_data, experiment_id FROM Measurement
WHERE ID=? LIMIT 1
`

func (q *Queries) GetMeasurement(ctx context.Context, id int64) (Measurement, error) {
	row := q.db.QueryRowContext(ctx, getMeasurement, id)
	var i Measurement
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.ProfCnt,
		&i.ProfLen,
		&i.RepRate,
		&i.ProfileData,
		&i.ExperimentID,
	)
	return i, err
}
